generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int            @id @default(autoincrement())
  username              String         @unique @db.VarChar(30)
  email                 String         @unique @db.VarChar(255)
  password              String?        @db.VarChar(255)
  avatar_url            String?        @db.VarChar(350)
  bio                   String?        @db.VarChar(280)
  auth_provider         String         @default("email") @db.VarChar(15)
  googleId              String?        @unique @db.VarChar(30)
  created_at            DateTime       @default(now())
  comments              Comment[]
  followers             Follow[]       @relation("Follower")
  following             Follow[]       @relation("Following")
  likes                 Like[]
  receivedNotifications Notification[] @relation("Receiver")
  sentNotifications     Notification[] @relation("Sender")
  posts                 Post[]
}

model Post {
  id              Int       @id @default(autoincrement())
  user_id         Int
  content         String    @db.VarChar(280)
  sentiment       String   @db.VarChar(20)
  sentiment_score Float
  language        String    @db.VarChar(10)
  created_at      DateTime  @default(now())
  media_url       String?   @db.VarChar(350)
  comments        Comment[]
  likes           Like[]
  user            User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id], map: "Post_user_id_fkey")
}

model Comment {
  id                Int       @id @default(autoincrement())
  content           String    @db.VarChar(280)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now()) @updatedAt
  user_id           Int
  post_id           Int
  parent_comment_id Int?
  media_url         String?   @db.VarChar(350)
  sentiment         String   @db.VarChar(20)
  sentiment_score   Float
  language        String    @db.VarChar(10)
  parent            Comment?  @relation("CommentReplies", fields: [parent_comment_id], references: [id], onDelete: Cascade)
  replies           Comment[] @relation("CommentReplies")
  post              Post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([parent_comment_id], map: "Comment_parent_comment_id_fkey")
  @@index([post_id], map: "Comment_post_id_fkey")
  @@index([user_id], map: "Comment_user_id_fkey")
}

model Like {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  user_id    Int
  post_id    Int
  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, post_id])
  @@index([post_id], map: "Like_post_id_fkey")
}

model Follow {
  id           Int      @id @default(autoincrement())
  created_at   DateTime @default(now())
  follower_id  Int
  following_id Int
  follower     User     @relation("Follower", fields: [follower_id], references: [id], onDelete: Cascade)
  following    User     @relation("Following", fields: [following_id], references: [id], onDelete: Cascade)

  @@unique([follower_id, following_id])
  @@index([following_id], map: "Follow_following_id_fkey")
}

model Translation {
  id              Int         @id @default(autoincrement())
  content_type    ContentType
  content_id      Int
  original_text   String      @db.Text
  translated_text String      @db.Text
  target_language String      @db.VarChar(10)
  source_language String?     @db.VarChar(10)
  created_at      DateTime    @default(now())

  @@unique([content_type, content_id, target_language])
}

model Notification {
  id                Int      @id @default(autoincrement())
  notification_type String   @db.VarChar(20)
  is_read           Boolean  @default(false)
  created_at        DateTime @default(now())
  sender_id         Int
  receiver_id       Int
  post_id           Int?
  comment_id        Int?
  receiver          User     @relation("Receiver", fields: [receiver_id], references: [id], onDelete: Cascade)
  sender            User     @relation("Sender", fields: [sender_id], references: [id], onDelete: Cascade)

  @@index([receiver_id], map: "Notification_receiver_id_fkey")
  @@index([sender_id], map: "Notification_sender_id_fkey")
}

enum ContentType {
  post
  comment
}
